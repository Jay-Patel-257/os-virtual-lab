<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.text.Font?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="572.0" prefWidth="1022.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="concurrency.Info">
   <center>
      <AnchorPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <children>
            <TextArea editable="false" prefHeight="572.0" prefWidth="1022.4" style="-fx-background-color: #F5F5DC;" text="Lock Variable:&#10; &#10;•&#9;Lock variable is a synchronization mechanism.&#10;•&#9;It uses a lock variable to provide the synchronization among the processes executing concurrently.&#10;•&#9;However, it completely fails to provide the synchronization.&#10; &#10;Initially, lock value is set to 0.&#10;•&#9;Lock value = 0 means the critical section is currently vacant and no process is present inside it.&#10;•&#9;Lock value = 1 means the critical section is currently occupied and a process is present inside it.&#10; &#10;Working:&#10; &#10;This synchronization mechanism is supposed to work as explained in the following scenes:&#10; &#10;Scene-01:&#10; &#10;•&#9;Process P0 arrives.&#10;•&#9;It executes the lock!=0 instruction.&#10;•&#9;Since lock value is set to 0, so it returns value 0 to the while loop.&#10;•&#9;The while loop condition breaks.&#10;•&#9;It sets the lock value to 1 and enters the critical section.&#10;•&#9;Now, even if process P0 gets preempted in the middle, no other process can enter the critical section.&#10;•&#9;Any other process can enter only after process P0 completes and sets the lock value to 0.&#10; &#10;Scene-02:&#10; &#10;•&#9;Another process P1 arrives.&#10;•&#9;It executes the lock!=0 instruction.&#10;•&#9;Since lock value is set to 1, so it returns value 1 to the while loop.&#10;•&#9;The returned value 1 does not break the while loop condition.&#10;•&#9;The process P1 is trapped inside an infinite while loop.&#10;•&#9;The while loop keeps the process P1 busy until the lock value becomes 0 and its condition breaks.&#10; &#10;Scene-03:&#10; &#10;•&#9;Process P0 comes out of the critical section and sets the lock value to 0.&#10;•&#9;The while loop condition of process P1 breaks.&#10;•&#9;It sets the lock value to 1 and enters the critical section.&#10;•&#9;Now, even if process P1 gets preempted in the middle, no other process can enter the critical section.&#10;•&#9;Any other process can enter only after process P1 completes and sets the lock value to 0.&#10; &#10;Failure of the Mechanism:&#10; &#10;•&#9;The mechanism completely fails to provide the synchronization among the processes.&#10;•&#9;It can not even guarantee to meet the basic criterion of mutual exclusion.&#10; &#10;Explanation:&#10; &#10;The occurrence of the following scenes may lead to two processes present inside the critical section at the same time:&#10; &#10;Scene-01:&#10; &#10;•&#9;Process P0 arrives.&#10;•&#9;It executes the lock!=0 instruction.&#10;•&#9;Since lock value is set to 0, so it returns value 0 to the while loop.&#10;•&#9;The while loop condition breaks.&#10;•&#9;Now, process P0 gets preempted before it sets the lock value to 1.&#10; &#10;Scene-02:&#10; &#10;•&#9;Another process P1 arrives.&#10;•&#9;It executes the lock!=0 instruction.&#10;•&#9;Since lock value is still 0, so it returns value 0 to the while loop.&#10;•&#9;The while loop condition breaks.&#10;•&#9;It sets the lock value to 1 and enters the critical section.&#10;•&#9;Now, process P1 gets preempted in the middle of the critical section.&#10; &#10;Scene-03:&#10; &#10;•&#9;Process P0 gets scheduled again.&#10;•&#9;It resumes its execution.&#10;•&#9;Before preemption, it had already failed the while loop condition.&#10;•&#9;Now, it begins execution from the next instruction.&#10;•&#9;It sets the lock value to 1 (which is already 1) and enters the critical section.&#10; &#10;Thus, both the processes get to present inside the critical section at the same time.&#10; &#10;Similarly,&#10;•&#9;If there are n processes, then all of them may be present inside the critical section at the same time.&#10;•&#9;This happens when each process gets preempted immediately after breaking the while loop condition.&#10; &#10;Characteristics:&#10; &#10;The characteristics of this synchronization mechanism are:&#10;•&#9;It can be used for any number of processes.&#10;•&#9;It is a software mechanism implemented in user mode.&#10;•&#9;There is no support required from the operating system.&#10;•&#9;It is a busy waiting solution which keeps the CPU busy when the process is actually waiting.&#10;•&#9;It does not fulfill any criteria of synchronization mechanism.&#10; &#10;Conclusion:&#10; &#10;•&#9;The lock variable synchronization mechanism is a complete failure.&#10;•&#9;Thus, it is never used.&#10;" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
               <font>
                  <Font name="Verdana Italic" size="14.0" />
               </font>
               <opaqueInsets>
                  <Insets />
               </opaqueInsets>
            </TextArea>
            <Button layoutX="951.0" layoutY="472.0" mnemonicParsing="false" onAction="#backToIndex" text="Back" />
         </children>
      </AnchorPane>
   </center>
   <top>
      <Label alignment="CENTER" prefHeight="60.0" prefWidth="1022.0" style="-fx-background-color: #009688;" text="Lock Variable" textFill="WHITE" BorderPane.alignment="CENTER">
         <font>
            <Font name="Verdana Bold" size="36.0" />
         </font>
      </Label>
   </top>
</BorderPane>
