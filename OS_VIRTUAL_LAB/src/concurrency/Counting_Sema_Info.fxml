<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.text.Font?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="572.0" prefWidth="1022.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="concurrency.Info">
   <center>
      <AnchorPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <children>
            <TextArea editable="false" prefHeight="572.0" prefWidth="1022.4" text="Counting Semaphore:&#10;&#10;There are the scenarios in which more than one processes need to execute in critical section simultaneously. However, counting semaphore can be used when we need to have more than one process in the critical section at the same time.&#10;The programming code of semaphore implementation is shown below which includes the structure of semaphore and the logic using which the entry and the exit can be performed in the critical section.&#10;&#10;Algorithm:&#10;&#10;struct Semaphore  &#10;{  &#10;    int value; // processes that can enter in the critical section simultaneously.   &#10;    queue type L; // L contains set of processes which get blocked   &#10;}  &#10;Down (Semaphore S)  &#10;{  &#10;    SS.value = S.value - 1; //semaphore's value will get decreased when a new   &#10;    //process enter in the critical section   &#10;    if (S.value&lt; 0)  &#10;    {  &#10;        put_process(PCB) in L; //if the value is negative then   &#10;        //the process will get into the blocked state.  &#10;        Sleep();   &#10;    }  &#10;    else  &#10;        return;  &#10;}  &#10;up (Semaphore s)  &#10;{  &#10;    SS.value = S.value+1; //semaphore value will get increased when   &#10;    //it makes an exit from the critical section.   &#10;    if(S.value&lt;=0)  &#10;    {  &#10;        select a process from L; //if the value of semaphore is positive   &#10;        //then wake one of the processes in the blocked queue.   &#10;        wake-up();  &#10;    }  &#10;    }  &#10;}  &#10;&#10;• In this mechanism, the entry and exit in the critical section are performed on the basis of the value of counting semaphore. The value of counting semaphore at any point of time indicates the maximum number of processes that can enter in the critical section at the same time.&#10;• A process which wants to enter in the critical section first decrease the semaphore value by 1 and then check whether it gets negative or not. If it gets negative then the process is pushed in the list of blocked processes (i.e. q) otherwise it gets enter in the critical section.&#10;• When a process exits from the critical section, it increases the counting semaphore by 1 and then checks whether it is negative or zero. If it is negative then that means that at least one process is waiting in the blocked state hence, to ensure bounded waiting, the first process among the list of blocked processes will wake up and gets enter in the critical section.&#10;• The processes in the blocked list will get waked in the order in which they slept. If the value of counting semaphore is negative then it states the number of processes in the blocked state while if it is positive then it states the number of slots available in the critical section.&#10;&#10;" wrapText="true" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
               <font>
                  <Font name="Verdana Italic" size="14.0" />
               </font>
               <opaqueInsets>
                  <Insets />
               </opaqueInsets>
            </TextArea>
            <Button layoutX="951.0" layoutY="472.0" mnemonicParsing="false" onAction="#backToIndex" text="Back" />
         </children>
      </AnchorPane>
   </center>
   <top>
      <Label alignment="CENTER" prefHeight="60.0" prefWidth="1022.0" style="-fx-background-color: #009688;" text="Counting Semaphore" textFill="WHITE" BorderPane.alignment="CENTER">
         <font>
            <Font name="Verdana Bold" size="36.0" />
         </font>
      </Label>
   </top>
</BorderPane>
