<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.text.Font?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="572.0" prefWidth="1022.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="concurrency.Info">
   <center>
      <AnchorPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <children>
            <TextArea editable="false" prefHeight="572.0" prefWidth="1022.4" text="Banker's Algorithm:&#10;&#9;• It is a banker algorithm used to avoid deadlock and allocate resources safely to each process in the computer system. &#10;&#9;• The 'S-State' examines all possible tests or activities before deciding whether the allocation should be allowed to each process. It also helps the operating system to successfully share the resources between all the processes. &#10;&#9;• The banker's algorithm is named because it checks whether a person should be sanctioned a loan amount or not to help the bank system safely simulate allocation resources. &#10;&#9;• In this section, we will learn the Banker's Algorithm in detail. Also, we will solve problems based on the Banker's Algorithm. To understand the Banker's Algorithm first we will see a real word example of it.&#10;&#9;• Suppose the number of account holders in a particular bank is 'n', and the total money in a bank is 'T'. If an account holder applies for a loan; first, the bank subtracts the loan amount from full cash and then estimates the cash difference is greater than T to approve the loan amount.&#10;&#9;• These steps are taken because if another person applies for a loan or withdraws some amount from the bank, it helps the bank manage and operate all things without any restriction in the functionality of the banking system.&#10;&#9;• Similarly, it works in an operating system. When a new process is created in a computer system, the process must provide all types of information to the operating system like upcoming processes, requests for their resources, counting them, and delays. Based on these criteria, the operating system decides which process sequence should be executed or waited so that no deadlock occurs in a system. Therefore, it is also known as deadlock avoidance algorithm or deadlock detection in the operating system.&#10;&#10;Advantages:&#10;Following are the essential characteristics of the Banker's algorithm:&#10;&#9;• It contains various resources that meet the requirements of each process.&#10;&#9;• Each process should provide information to the operating system for upcoming resource requests, the number of resources, and how long the resources will be held.&#10;&#9;• It helps the operating system manage and control process requests for each type of resource in the computer system.&#10;&#9;• The algorithm has a Max resource attribute that represents indicates each process can hold the maximum number of resources in a system.&#10;&#10;Disadvantages:&#10;&#9;• It requires a fixed number of processes, and no additional processes can be started in the system while executing the process.&#10;&#9;• The algorithm does no longer allows the processes to exchange its maximum needs while processing its tasks.&#10;&#9;• Each process has to know and state their maximum resource requirement in advance for the system.&#10;&#9;• The number of resource requests can be granted in a finite time, but the time limit for allocating the resources is one year.&#10;&#10;When working with a banker's algorithm, it requests to know about three things:&#10;&#9;• How much each process can request for each resource in the system. It is denoted by the [MAX] request.&#10;&#9;• How much each process is currently holding each resource in a system. It is denoted by the [ALLOCATED] resource.&#10;&#9;• It represents the number of each resource currently available in the system. It is denoted by the [AVAILABLE] resource.&#10;" wrapText="true" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
               <font>
                  <Font name="Verdana Italic" size="14.0" />
               </font>
               <opaqueInsets>
                  <Insets />
               </opaqueInsets>
            </TextArea>
            <Button layoutX="951.0" layoutY="472.0" mnemonicParsing="false" onAction="#backToIndex" text="Back" />
         </children>
      </AnchorPane>
   </center>
   <top>
      <Label alignment="CENTER" prefHeight="60.0" prefWidth="1022.0" style="-fx-background-color: #009688;" text="Bankerś Algorithm" textFill="WHITE" BorderPane.alignment="CENTER">
         <font>
            <Font name="Verdana Bold" size="36.0" />
         </font>
      </Label>
   </top>
</BorderPane>
