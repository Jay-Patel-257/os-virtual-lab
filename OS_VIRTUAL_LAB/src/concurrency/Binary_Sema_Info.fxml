<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.text.Font?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="572.0" prefWidth="1022.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="concurrency.Info">
   <center>
      <AnchorPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <children>
            <TextArea editable="false" prefHeight="572.0" prefWidth="1022.4" text="Binary semaphore:&#10;&#10;In counting semaphore, Mutual exclusion was not provided because we has the set of processes which required to execute in the critical section simultaneously.&#10;However, Binary Semaphore strictly provides mutual exclusion. Here, instead of having more than 1 slots available in the critical section, we can only have at most 1 process in the critical section. The semaphore can have only two values, 0 or 1.&#10;Let's see the programming implementation of Binary Semaphore.&#10;&#10;Algorithm:&#10;&#10;struct semaphore&#10;{&#10;   enum value (0,1);&#10;   Queue type L;&#10;}&#10;Wait (semaphore s)&#10;{&#10;   if (s.value == 1)&#10;   {&#10;      s.value=0;&#10;   }&#10;   else&#10;   {&#10;      put process (PCB) in s.L;&#10;      sleep();&#10;   }&#10;}&#10;Signal (semaphore s)&#10;{&#10;   if (s.L is empty)&#10;   {&#10;      s.value=1;&#10;   }&#10;   else&#10;   {&#10;       select a process (PCB) from s.L;&#10;       wake up();&#10;   }&#10;}&#10;&#10;Explanation:&#10;&#10;The above implementation of binary semaphore has been explained in the following points:&#10;&#10;Point-01:&#10;A binary semaphore has two components:&#10;&#9;• An integer value which can be either 0 or 1&#10;&#9;• An associated waiting list (usually a queue)&#10;&#10;Point-02:&#10;&#9;• The waiting list of binary semaphore contains the processes that got blocked when trying to enter the critical section.&#10;&#9;• In waiting list, the blocked processes are put to sleep.&#10;&#9;• The waiting list is usually implemented using a queue data structure.&#10;&#9;• Using a queue as waiting list ensures bounded waiting.&#10;&#9;• This is because the process which arrives first in the waiting queue gets the chance to enter the critical section first.&#10; &#10;Point-03:&#10;&#9;• The wait operation is executed when a process tries to enter the critical section.&#10;&#9;• Then, there are two cases possible.&#10;&#10;Case-01: Binary Semaphore Value = 1&#10;If the value of binary semaphore is 1,&#10;&#9;• The value of binary semaphore is set to 0.&#10;&#9;• The process is allowed to enter the critical section.&#10;&#10;Case-02: Binary Semaphore Value = 0&#10;If the value of binary semaphore is 0,&#10;&#9;• The process is blocked and not allowed to enter the critical section.&#10;&#9;• The process is put to sleep in the waiting list.&#10;&#10;Point-04:&#10;&#9;• The signal operation is executed when a process takes exit from the critical section.&#10;&#9;• Then, there are two cases possible.&#10;&#10;Case-01: Waiting List is Empty&#10;&#9;• If the waiting list is empty, the value of binary semaphore is set to 1.&#10;&#10;Case-02: Waiting List is Not Empty&#9;&#10;&#9;• If the waiting list is not empty, a process is chosen from the waiting list and wake up to execute.&#10;&#10;Point-05:&#10;Binary semaphores are mainly used for two purposes-&#10;•&#9;To ensure mutual exclusion.&#10;•&#9;To implement the order in which the processes must execute.&#10;" wrapText="true" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
               <font>
                  <Font name="Verdana Italic" size="14.0" />
               </font>
               <opaqueInsets>
                  <Insets />
               </opaqueInsets>
            </TextArea>
            <Button layoutX="951.0" layoutY="472.0" mnemonicParsing="false" onAction="#backToIndex" text="Back" />
         </children>
      </AnchorPane>
   </center>
   <top>
      <Label alignment="CENTER" prefHeight="60.0" prefWidth="1022.0" style="-fx-background-color: #009688;" text="Binary Semaphore" textFill="WHITE" BorderPane.alignment="CENTER">
         <font>
            <Font name="Verdana Bold" size="36.0" />
         </font>
      </Label>
   </top>
</BorderPane>
